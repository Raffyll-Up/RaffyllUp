/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IRaffle {
  export type WinnerStruct = { account: AddressLike; amount: BigNumberish };

  export type WinnerStructOutput = [account: string, amount: bigint] & {
    account: string;
    amount: bigint;
  };
}

export interface IRaffleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchPayout"
      | "claim"
      | "community"
      | "distributionMode"
      | "drawWinners"
      | "endTime"
      | "isParticipant"
      | "numberOfWinners"
      | "participantsCount"
      | "prizeToken"
      | "register"
      | "start"
      | "status"
      | "winners"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchPayout"
      | "Claimed"
      | "Registered"
      | "Started"
      | "WinnersDrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchPayout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "community", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isParticipant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participantsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prizeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "winners", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "community", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prizeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winners", data: BytesLike): Result;
}

export namespace BatchPayoutEvent {
  export type InputTuple = [totalPaid: BigNumberish];
  export type OutputTuple = [totalPaid: bigint];
  export interface OutputObject {
    totalPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartedEvent {
  export type InputTuple = [endTime: BigNumberish];
  export type OutputTuple = [endTime: bigint];
  export interface OutputObject {
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnersDrawnEvent {
  export type InputTuple = [seed: BytesLike, winners: AddressLike[]];
  export type OutputTuple = [seed: string, winners: string[]];
  export interface OutputObject {
    seed: string;
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRaffle extends BaseContract {
  connect(runner?: ContractRunner | null): IRaffle;
  waitForDeployment(): Promise<this>;

  interface: IRaffleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchPayout: TypedContractMethod<[], [void], "nonpayable">;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  community: TypedContractMethod<[], [string], "view">;

  distributionMode: TypedContractMethod<[], [bigint], "view">;

  drawWinners: TypedContractMethod<[], [void], "nonpayable">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  isParticipant: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  numberOfWinners: TypedContractMethod<[], [bigint], "view">;

  participantsCount: TypedContractMethod<[], [bigint], "view">;

  prizeToken: TypedContractMethod<[], [string], "view">;

  register: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  start: TypedContractMethod<[], [void], "nonpayable">;

  status: TypedContractMethod<[], [bigint], "view">;

  winners: TypedContractMethod<[], [IRaffle.WinnerStructOutput[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchPayout"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "community"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributionMode"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "drawWinners"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isParticipant"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "numberOfWinners"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participantsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "prizeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winners"
  ): TypedContractMethod<[], [IRaffle.WinnerStructOutput[]], "view">;

  getEvent(
    key: "BatchPayout"
  ): TypedContractEvent<
    BatchPayoutEvent.InputTuple,
    BatchPayoutEvent.OutputTuple,
    BatchPayoutEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Started"
  ): TypedContractEvent<
    StartedEvent.InputTuple,
    StartedEvent.OutputTuple,
    StartedEvent.OutputObject
  >;
  getEvent(
    key: "WinnersDrawn"
  ): TypedContractEvent<
    WinnersDrawnEvent.InputTuple,
    WinnersDrawnEvent.OutputTuple,
    WinnersDrawnEvent.OutputObject
  >;

  filters: {
    "BatchPayout(uint256)": TypedContractEvent<
      BatchPayoutEvent.InputTuple,
      BatchPayoutEvent.OutputTuple,
      BatchPayoutEvent.OutputObject
    >;
    BatchPayout: TypedContractEvent<
      BatchPayoutEvent.InputTuple,
      BatchPayoutEvent.OutputTuple,
      BatchPayoutEvent.OutputObject
    >;

    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Registered(address)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;

    "Started(uint64)": TypedContractEvent<
      StartedEvent.InputTuple,
      StartedEvent.OutputTuple,
      StartedEvent.OutputObject
    >;
    Started: TypedContractEvent<
      StartedEvent.InputTuple,
      StartedEvent.OutputTuple,
      StartedEvent.OutputObject
    >;

    "WinnersDrawn(bytes32,address[])": TypedContractEvent<
      WinnersDrawnEvent.InputTuple,
      WinnersDrawnEvent.OutputTuple,
      WinnersDrawnEvent.OutputObject
    >;
    WinnersDrawn: TypedContractEvent<
      WinnersDrawnEvent.InputTuple,
      WinnersDrawnEvent.OutputTuple,
      WinnersDrawnEvent.OutputObject
    >;
  };
}
