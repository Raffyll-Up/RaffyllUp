/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICommunityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "getAllRaffleIds"
      | "getRaffleCore"
      | "getWinners"
      | "isRegistered"
      | "markRafflePaidOut"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllRaffleIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleCore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markRafflePaidOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRaffleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markRafflePaidOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export interface ICommunity extends BaseContract {
  connect(runner?: ContractRunner | null): ICommunity;
  waitForDeployment(): Promise<this>;

  interface: ICommunityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  getAllRaffleIds: TypedContractMethod<[], [bigint[]], "view">;

  getRaffleCore: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        token: string;
        endTime: bigint;
        winnersCount: bigint;
        maxParticipants: bigint;
        status: bigint;
        totalPrize: bigint;
        requireCommunityMembership: boolean;
        participantsCount: bigint;
      }
    ],
    "view"
  >;

  getWinners: TypedContractMethod<
    [id: BigNumberish],
    [[string[], bigint[]] & { winners: string[]; amounts: bigint[] }],
    "view"
  >;

  isRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  markRafflePaidOut: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllRaffleIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRaffleCore"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        token: string;
        endTime: bigint;
        winnersCount: bigint;
        maxParticipants: bigint;
        status: bigint;
        totalPrize: bigint;
        requireCommunityMembership: boolean;
        participantsCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinners"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[string[], bigint[]] & { winners: string[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "markRafflePaidOut"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
