/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RaffylFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "communityNames"
      | "createCommunity"
      | "getAllRaffles"
      | "getCommunities"
      | "isCommunity"
      | "onRaffleCreated"
      | "owner"
      | "processBatchPayout"
      | "setTreasury"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchPayoutProcessed"
      | "CommunityCreated"
      | "RaffleRegistered"
      | "TreasuryChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "communityNames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCommunity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRaffles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCommunity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onRaffleCreated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processBatchPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "communityNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRaffles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRaffleCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processBatchPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace BatchPayoutProcessedEvent {
  export type InputTuple = [
    community: AddressLike,
    id: BigNumberish,
    totalPaid: BigNumberish
  ];
  export type OutputTuple = [community: string, id: bigint, totalPaid: bigint];
  export interface OutputObject {
    community: string;
    id: bigint;
    totalPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommunityCreatedEvent {
  export type InputTuple = [
    admin: AddressLike,
    community: AddressLike,
    name: string
  ];
  export type OutputTuple = [admin: string, community: string, name: string];
  export interface OutputObject {
    admin: string;
    community: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleRegisteredEvent {
  export type InputTuple = [community: AddressLike, id: BigNumberish];
  export type OutputTuple = [community: string, id: bigint];
  export interface OutputObject {
    community: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryChangedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RaffylFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RaffylFactory;
  waitForDeployment(): Promise<this>;

  interface: RaffylFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  communityNames: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  createCommunity: TypedContractMethod<[name: string], [string], "nonpayable">;

  getAllRaffles: TypedContractMethod<
    [],
    [[string[], bigint[]] & { communities: string[]; ids: bigint[] }],
    "view"
  >;

  getCommunities: TypedContractMethod<[], [string[]], "view">;

  isCommunity: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  onRaffleCreated: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  processBatchPayout: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "communityNames"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "createCommunity"
  ): TypedContractMethod<[name: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllRaffles"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { communities: string[]; ids: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCommunities"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isCommunity"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onRaffleCreated"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processBatchPayout"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BatchPayoutProcessed"
  ): TypedContractEvent<
    BatchPayoutProcessedEvent.InputTuple,
    BatchPayoutProcessedEvent.OutputTuple,
    BatchPayoutProcessedEvent.OutputObject
  >;
  getEvent(
    key: "CommunityCreated"
  ): TypedContractEvent<
    CommunityCreatedEvent.InputTuple,
    CommunityCreatedEvent.OutputTuple,
    CommunityCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RaffleRegistered"
  ): TypedContractEvent<
    RaffleRegisteredEvent.InputTuple,
    RaffleRegisteredEvent.OutputTuple,
    RaffleRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryChanged"
  ): TypedContractEvent<
    TreasuryChangedEvent.InputTuple,
    TreasuryChangedEvent.OutputTuple,
    TreasuryChangedEvent.OutputObject
  >;

  filters: {
    "BatchPayoutProcessed(address,uint256,uint256)": TypedContractEvent<
      BatchPayoutProcessedEvent.InputTuple,
      BatchPayoutProcessedEvent.OutputTuple,
      BatchPayoutProcessedEvent.OutputObject
    >;
    BatchPayoutProcessed: TypedContractEvent<
      BatchPayoutProcessedEvent.InputTuple,
      BatchPayoutProcessedEvent.OutputTuple,
      BatchPayoutProcessedEvent.OutputObject
    >;

    "CommunityCreated(address,address,string)": TypedContractEvent<
      CommunityCreatedEvent.InputTuple,
      CommunityCreatedEvent.OutputTuple,
      CommunityCreatedEvent.OutputObject
    >;
    CommunityCreated: TypedContractEvent<
      CommunityCreatedEvent.InputTuple,
      CommunityCreatedEvent.OutputTuple,
      CommunityCreatedEvent.OutputObject
    >;

    "RaffleRegistered(address,uint256)": TypedContractEvent<
      RaffleRegisteredEvent.InputTuple,
      RaffleRegisteredEvent.OutputTuple,
      RaffleRegisteredEvent.OutputObject
    >;
    RaffleRegistered: TypedContractEvent<
      RaffleRegisteredEvent.InputTuple,
      RaffleRegisteredEvent.OutputTuple,
      RaffleRegisteredEvent.OutputObject
    >;

    "TreasuryChanged(address)": TypedContractEvent<
      TreasuryChangedEvent.InputTuple,
      TreasuryChangedEvent.OutputTuple,
      TreasuryChangedEvent.OutputObject
    >;
    TreasuryChanged: TypedContractEvent<
      TreasuryChangedEvent.InputTuple,
      TreasuryChangedEvent.OutputTuple,
      TreasuryChangedEvent.OutputObject
    >;
  };
}
