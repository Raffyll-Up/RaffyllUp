/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CommunityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "cancelRaffle"
      | "createRaffle"
      | "depositETH"
      | "depositToken"
      | "drawWinners"
      | "factory"
      | "getAllRaffleIds"
      | "getBalance"
      | "getRaffleCore"
      | "getRaffleToken"
      | "getWinners"
      | "isRegistered"
      | "lockRaffleFunds"
      | "markRafflePaidOut"
      | "register"
      | "registerForRaffle"
      | "setAdmin"
      | "vault"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "FundedETH"
      | "FundedToken"
      | "RaffleCancelled"
      | "RaffleCreated"
      | "RaffleLocked"
      | "Registered"
      | "RegisteredForRaffle"
      | "WinnersDrawn"
      | "WithdrawnETH"
      | "WithdrawnToken"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelRaffle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRaffle",
    values: [
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllRaffleIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleCore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockRaffleFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markRafflePaidOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerForRaffle",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRaffleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockRaffleFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markRafflePaidOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerForRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedETHEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedTokenEvent {
  export type InputTuple = [
    from: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, token: string, amount: bigint];
  export interface OutputObject {
    from: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleCancelledEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    token: AddressLike,
    endTime: BigNumberish,
    winnersCount: BigNumberish,
    maxParticipants: BigNumberish,
    totalPrize: BigNumberish,
    requireCommunityMembership: boolean
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    token: string,
    endTime: bigint,
    winnersCount: bigint,
    maxParticipants: bigint,
    totalPrize: bigint,
    requireCommunityMembership: boolean
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    token: string;
    endTime: bigint;
    winnersCount: bigint;
    maxParticipants: bigint;
    totalPrize: bigint;
    requireCommunityMembership: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleLockedEvent {
  export type InputTuple = [
    id: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    token: string,
    amount: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    id: bigint;
    token: string;
    amount: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredForRaffleEvent {
  export type InputTuple = [id: BigNumberish, user: AddressLike];
  export type OutputTuple = [id: bigint, user: string];
  export interface OutputObject {
    id: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnersDrawnEvent {
  export type InputTuple = [
    id: BigNumberish,
    seed: BytesLike,
    winners: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    id: bigint,
    seed: string,
    winners: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    id: bigint;
    seed: string;
    winners: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnETHEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnTokenEvent {
  export type InputTuple = [
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [to: string, token: string, amount: bigint];
  export interface OutputObject {
    to: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Community extends BaseContract {
  connect(runner?: ContractRunner | null): Community;
  waitForDeployment(): Promise<this>;

  interface: CommunityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  cancelRaffle: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  createRaffle: TypedContractMethod<
    [
      name: string,
      token: AddressLike,
      endTime: BigNumberish,
      winnersCount: BigNumberish,
      maxParticipants: BigNumberish,
      totalPrize: BigNumberish,
      requireMembership: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  depositETH: TypedContractMethod<[], [void], "payable">;

  depositToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  drawWinners: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  factory: TypedContractMethod<[], [string], "view">;

  getAllRaffleIds: TypedContractMethod<[], [bigint[]], "view">;

  getBalance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getRaffleCore: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        token: string;
        endTime: bigint;
        winnersCount: bigint;
        maxParticipants: bigint;
        status: bigint;
        totalPrize: bigint;
        requireCommunityMembership: boolean;
        participantsCount: bigint;
      }
    ],
    "view"
  >;

  getRaffleToken: TypedContractMethod<[id: BigNumberish], [string], "view">;

  getWinners: TypedContractMethod<
    [id: BigNumberish],
    [[string[], bigint[]] & { winners: string[]; amounts: bigint[] }],
    "view"
  >;

  isRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  lockRaffleFunds: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  markRafflePaidOut: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<[], [void], "nonpayable">;

  registerForRaffle: TypedContractMethod<
    [id: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  vault: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelRaffle"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRaffle"
  ): TypedContractMethod<
    [
      name: string,
      token: AddressLike,
      endTime: BigNumberish,
      winnersCount: BigNumberish,
      maxParticipants: BigNumberish,
      totalPrize: BigNumberish,
      requireMembership: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "drawWinners"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllRaffleIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRaffleCore"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        token: string;
        endTime: bigint;
        winnersCount: bigint;
        maxParticipants: bigint;
        status: bigint;
        totalPrize: bigint;
        requireCommunityMembership: boolean;
        participantsCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRaffleToken"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getWinners"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[string[], bigint[]] & { winners: string[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockRaffleFunds"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markRafflePaidOut"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerForRaffle"
  ): TypedContractMethod<
    [id: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "FundedETH"
  ): TypedContractEvent<
    FundedETHEvent.InputTuple,
    FundedETHEvent.OutputTuple,
    FundedETHEvent.OutputObject
  >;
  getEvent(
    key: "FundedToken"
  ): TypedContractEvent<
    FundedTokenEvent.InputTuple,
    FundedTokenEvent.OutputTuple,
    FundedTokenEvent.OutputObject
  >;
  getEvent(
    key: "RaffleCancelled"
  ): TypedContractEvent<
    RaffleCancelledEvent.InputTuple,
    RaffleCancelledEvent.OutputTuple,
    RaffleCancelledEvent.OutputObject
  >;
  getEvent(
    key: "RaffleCreated"
  ): TypedContractEvent<
    RaffleCreatedEvent.InputTuple,
    RaffleCreatedEvent.OutputTuple,
    RaffleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RaffleLocked"
  ): TypedContractEvent<
    RaffleLockedEvent.InputTuple,
    RaffleLockedEvent.OutputTuple,
    RaffleLockedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RegisteredForRaffle"
  ): TypedContractEvent<
    RegisteredForRaffleEvent.InputTuple,
    RegisteredForRaffleEvent.OutputTuple,
    RegisteredForRaffleEvent.OutputObject
  >;
  getEvent(
    key: "WinnersDrawn"
  ): TypedContractEvent<
    WinnersDrawnEvent.InputTuple,
    WinnersDrawnEvent.OutputTuple,
    WinnersDrawnEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnETH"
  ): TypedContractEvent<
    WithdrawnETHEvent.InputTuple,
    WithdrawnETHEvent.OutputTuple,
    WithdrawnETHEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnToken"
  ): TypedContractEvent<
    WithdrawnTokenEvent.InputTuple,
    WithdrawnTokenEvent.OutputTuple,
    WithdrawnTokenEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "FundedETH(address,uint256)": TypedContractEvent<
      FundedETHEvent.InputTuple,
      FundedETHEvent.OutputTuple,
      FundedETHEvent.OutputObject
    >;
    FundedETH: TypedContractEvent<
      FundedETHEvent.InputTuple,
      FundedETHEvent.OutputTuple,
      FundedETHEvent.OutputObject
    >;

    "FundedToken(address,address,uint256)": TypedContractEvent<
      FundedTokenEvent.InputTuple,
      FundedTokenEvent.OutputTuple,
      FundedTokenEvent.OutputObject
    >;
    FundedToken: TypedContractEvent<
      FundedTokenEvent.InputTuple,
      FundedTokenEvent.OutputTuple,
      FundedTokenEvent.OutputObject
    >;

    "RaffleCancelled(uint256)": TypedContractEvent<
      RaffleCancelledEvent.InputTuple,
      RaffleCancelledEvent.OutputTuple,
      RaffleCancelledEvent.OutputObject
    >;
    RaffleCancelled: TypedContractEvent<
      RaffleCancelledEvent.InputTuple,
      RaffleCancelledEvent.OutputTuple,
      RaffleCancelledEvent.OutputObject
    >;

    "RaffleCreated(uint256,string,address,uint64,uint32,uint32,uint256,bool)": TypedContractEvent<
      RaffleCreatedEvent.InputTuple,
      RaffleCreatedEvent.OutputTuple,
      RaffleCreatedEvent.OutputObject
    >;
    RaffleCreated: TypedContractEvent<
      RaffleCreatedEvent.InputTuple,
      RaffleCreatedEvent.OutputTuple,
      RaffleCreatedEvent.OutputObject
    >;

    "RaffleLocked(uint256,address,uint256,uint64)": TypedContractEvent<
      RaffleLockedEvent.InputTuple,
      RaffleLockedEvent.OutputTuple,
      RaffleLockedEvent.OutputObject
    >;
    RaffleLocked: TypedContractEvent<
      RaffleLockedEvent.InputTuple,
      RaffleLockedEvent.OutputTuple,
      RaffleLockedEvent.OutputObject
    >;

    "Registered(address)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;

    "RegisteredForRaffle(uint256,address)": TypedContractEvent<
      RegisteredForRaffleEvent.InputTuple,
      RegisteredForRaffleEvent.OutputTuple,
      RegisteredForRaffleEvent.OutputObject
    >;
    RegisteredForRaffle: TypedContractEvent<
      RegisteredForRaffleEvent.InputTuple,
      RegisteredForRaffleEvent.OutputTuple,
      RegisteredForRaffleEvent.OutputObject
    >;

    "WinnersDrawn(uint256,bytes32,address[],uint256[])": TypedContractEvent<
      WinnersDrawnEvent.InputTuple,
      WinnersDrawnEvent.OutputTuple,
      WinnersDrawnEvent.OutputObject
    >;
    WinnersDrawn: TypedContractEvent<
      WinnersDrawnEvent.InputTuple,
      WinnersDrawnEvent.OutputTuple,
      WinnersDrawnEvent.OutputObject
    >;

    "WithdrawnETH(address,uint256)": TypedContractEvent<
      WithdrawnETHEvent.InputTuple,
      WithdrawnETHEvent.OutputTuple,
      WithdrawnETHEvent.OutputObject
    >;
    WithdrawnETH: TypedContractEvent<
      WithdrawnETHEvent.InputTuple,
      WithdrawnETHEvent.OutputTuple,
      WithdrawnETHEvent.OutputObject
    >;

    "WithdrawnToken(address,address,uint256)": TypedContractEvent<
      WithdrawnTokenEvent.InputTuple,
      WithdrawnTokenEvent.OutputTuple,
      WithdrawnTokenEvent.OutputObject
    >;
    WithdrawnToken: TypedContractEvent<
      WithdrawnTokenEvent.InputTuple,
      WithdrawnTokenEvent.OutputTuple,
      WithdrawnTokenEvent.OutputObject
    >;
  };
}
