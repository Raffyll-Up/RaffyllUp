/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TimelockVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchPay"
      | "canDisburse"
      | "community"
      | "factory"
      | "getAvailable"
      | "getBalance"
      | "lockFunds"
      | "locks"
      | "reservedTotal"
      | "sendFee"
      | "unlockFunds"
      | "withdrawAvailable"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchPaid"
      | "Disbursed"
      | "Locked"
      | "Paid"
      | "Unlocked"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchPay",
    values: [BigNumberish, AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canDisburse",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "community", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvailable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locks",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reservedTotal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAvailable",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "batchPay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canDisburse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "community", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAvailable",
    data: BytesLike
  ): Result;
}

export namespace BatchPaidEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    token: AddressLike,
    totalPaid: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    token: string,
    totalPaid: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    token: string;
    totalPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisbursedEvent {
  export type InputTuple = [raffleId: BigNumberish, token: AddressLike];
  export type OutputTuple = [raffleId: bigint, token: string];
  export interface OutputObject {
    raffleId: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    token: string,
    amount: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    token: string;
    amount: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaidEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    token: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [raffleId: bigint, token: string, amount: bigint];
  export interface OutputObject {
    raffleId: bigint;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TimelockVault extends BaseContract {
  connect(runner?: ContractRunner | null): TimelockVault;
  waitForDeployment(): Promise<this>;

  interface: TimelockVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchPay: TypedContractMethod<
    [
      raffleId: BigNumberish,
      token: AddressLike,
      tos: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  canDisburse: TypedContractMethod<
    [raffleId: BigNumberish, token: AddressLike],
    [boolean],
    "view"
  >;

  community: TypedContractMethod<[], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  getAvailable: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getBalance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  lockFunds: TypedContractMethod<
    [
      raffleId: BigNumberish,
      token: AddressLike,
      amount: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  locks: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, boolean, boolean, bigint] & {
        amount: bigint;
        endTime: bigint;
        locked: boolean;
        disbursed: boolean;
        paid: bigint;
      }
    ],
    "view"
  >;

  reservedTotal: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  sendFee: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockFunds: TypedContractMethod<
    [raffleId: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAvailable: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchPay"
  ): TypedContractMethod<
    [
      raffleId: BigNumberish,
      token: AddressLike,
      tos: AddressLike[],
      amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canDisburse"
  ): TypedContractMethod<
    [raffleId: BigNumberish, token: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "community"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAvailable"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockFunds"
  ): TypedContractMethod<
    [
      raffleId: BigNumberish,
      token: AddressLike,
      amount: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "locks"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, boolean, boolean, bigint] & {
        amount: bigint;
        endTime: bigint;
        locked: boolean;
        disbursed: boolean;
        paid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reservedTotal"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendFee"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockFunds"
  ): TypedContractMethod<
    [raffleId: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAvailable"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchPaid"
  ): TypedContractEvent<
    BatchPaidEvent.InputTuple,
    BatchPaidEvent.OutputTuple,
    BatchPaidEvent.OutputObject
  >;
  getEvent(
    key: "Disbursed"
  ): TypedContractEvent<
    DisbursedEvent.InputTuple,
    DisbursedEvent.OutputTuple,
    DisbursedEvent.OutputObject
  >;
  getEvent(
    key: "Locked"
  ): TypedContractEvent<
    LockedEvent.InputTuple,
    LockedEvent.OutputTuple,
    LockedEvent.OutputObject
  >;
  getEvent(
    key: "Paid"
  ): TypedContractEvent<
    PaidEvent.InputTuple,
    PaidEvent.OutputTuple,
    PaidEvent.OutputObject
  >;
  getEvent(
    key: "Unlocked"
  ): TypedContractEvent<
    UnlockedEvent.InputTuple,
    UnlockedEvent.OutputTuple,
    UnlockedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "BatchPaid(uint256,address,uint256)": TypedContractEvent<
      BatchPaidEvent.InputTuple,
      BatchPaidEvent.OutputTuple,
      BatchPaidEvent.OutputObject
    >;
    BatchPaid: TypedContractEvent<
      BatchPaidEvent.InputTuple,
      BatchPaidEvent.OutputTuple,
      BatchPaidEvent.OutputObject
    >;

    "Disbursed(uint256,address)": TypedContractEvent<
      DisbursedEvent.InputTuple,
      DisbursedEvent.OutputTuple,
      DisbursedEvent.OutputObject
    >;
    Disbursed: TypedContractEvent<
      DisbursedEvent.InputTuple,
      DisbursedEvent.OutputTuple,
      DisbursedEvent.OutputObject
    >;

    "Locked(uint256,address,uint256,uint64)": TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;
    Locked: TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;

    "Paid(uint256,address,address,uint256)": TypedContractEvent<
      PaidEvent.InputTuple,
      PaidEvent.OutputTuple,
      PaidEvent.OutputObject
    >;
    Paid: TypedContractEvent<
      PaidEvent.InputTuple,
      PaidEvent.OutputTuple,
      PaidEvent.OutputObject
    >;

    "Unlocked(uint256,address,uint256)": TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;
    Unlocked: TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
