/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1363__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Community",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Community__factory>;
    getContractFactory(
      name: "IRaffylFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRaffylFactory__factory>;
    getContractFactory(
      name: "ICommunity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICommunity__factory>;
    getContractFactory(
      name: "IRaffle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRaffle__factory>;
    getContractFactory(
      name: "RaffleHelpers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RaffleHelpers__factory>;
    getContractFactory(
      name: "ITimelockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelockVault__factory>;
    getContractFactory(
      name: "RaffylFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RaffylFactory__factory>;
    getContractFactory(
      name: "TimelockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockVault__factory>;

    getContractAt(
      name: "IERC1363",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1363>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Community",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Community>;
    getContractAt(
      name: "IRaffylFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRaffylFactory>;
    getContractAt(
      name: "ICommunity",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICommunity>;
    getContractAt(
      name: "IRaffle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRaffle>;
    getContractAt(
      name: "RaffleHelpers",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RaffleHelpers>;
    getContractAt(
      name: "ITimelockVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimelockVault>;
    getContractAt(
      name: "RaffylFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RaffylFactory>;
    getContractAt(
      name: "TimelockVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockVault>;

    deployContract(
      name: "IERC1363",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Community",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Community>;
    deployContract(
      name: "IRaffylFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRaffylFactory>;
    deployContract(
      name: "ICommunity",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICommunity>;
    deployContract(
      name: "IRaffle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRaffle>;
    deployContract(
      name: "RaffleHelpers",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RaffleHelpers>;
    deployContract(
      name: "ITimelockVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITimelockVault>;
    deployContract(
      name: "RaffylFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RaffylFactory>;
    deployContract(
      name: "TimelockVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TimelockVault>;

    deployContract(
      name: "IERC1363",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1363>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Community",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Community>;
    deployContract(
      name: "IRaffylFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRaffylFactory>;
    deployContract(
      name: "ICommunity",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICommunity>;
    deployContract(
      name: "IRaffle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRaffle>;
    deployContract(
      name: "RaffleHelpers",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RaffleHelpers>;
    deployContract(
      name: "ITimelockVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITimelockVault>;
    deployContract(
      name: "RaffylFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RaffylFactory>;
    deployContract(
      name: "TimelockVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TimelockVault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
